
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # ---------------------------------------------------------------------------- #
> # ---------------------------------------------------------------------------- #
> #                                                 
> # S4 implementation of generalized iLUCK models   
> # -- Tests for Class ScaledNormal incl. show method, unionHdi and cdfplot --             
> #                                                 
> # ---------------------------------------------------------------------------- #
> # ---------------------------------------------------------------------------- #
> 
> library(luck)
Loading required package: TeachingDemos

Attaching package: 'luck'

The following object is masked from 'package:utils':

    data

> library(testthat)
> library(TeachingDemos)
> 
> # constructor function
> expbsp1 <- ExponentialLuckModel(n0=c(1,2), y0=c(3,4))
> expbsp2 <- ExponentialLuckModel(n0=2, y0=7, data=rep(7,7))
> expbsp3 <- ExponentialLuckModel(
+   LuckModel(y0=c(1,3), n0=c(1,2), data=list(tau=sum(rexp(5)), n=5)))
> expbsp4 <- ExponentialLuckModel(n0=c(1,2), y0=6, data=rep(6,6))
> expbsp5 <- ExponentialLuckModel(n0=c(1,2), y0=c(3,4), data=rep(4,10))
> expbsp6 <- ExponentialLuckModel(n0=1, y0=c(1,5), data=rep(5,5)) 
> 
> expect_error(expbsp1e <- ExponentialLuckModel(bsp1))
> # error: n0 and y0 must be positive to define an exponential distribution
> expect_error(expbsp2e <- ExponentialLuckModel(bsp1, data=ExponentialData(mean=2, n=10)))
> # error: n0 and y0 must be positive to define an exponential distribution  
> expect_error(expbsp1e1 <- ExponentialLuckModel(bsp2)) # error: y0 must be one-dimensional                               
> expect_error(expbsp1e2 <- ExponentialLuckModel(bsp2, data=ExponentialData(mean=2, n=10)))
> # error: wrong dimension
> 
> # accessor and replacement methods
> n0(expbsp3)
     lower upper
[1,]     1     2
> y0(expbsp3)
     lower upper
[1,]     1     3
> data(expbsp3)
ExponentialData object containing a mean of 1.797614 for sample size 5 .
> n0(expbsp3) <- c(10,20)
> expect_warning(expect_error(n0(expbsp1) <- c(10,20,30)))  # error: wrong n0 definition
> y0(expbsp3) <- c(1,5)
> expect_error(y0(expbsp1) <- c(-5,-5,5,5)) # error: wrong y0 definition
> data(expbsp3) <- 1:6
> data(expbsp3) <- data(expbsp1)
> data(expbsp3) <- ExponentialData(mean=5, n=200)
> 
> # show method
> expbsp1
generalized iLUCK model for inference from exponential data
with prior parameter set: 
  lower n0 = 1   upper n0 = 2 
  lower y0 = 3   upper y0 = 4 
 giving a main parameter prior imprecision of 1 
corresponding to a set of Gamma priors
 with alpha in [ 2 ; 3 ] and beta in [ 3 ; 8 ] 
> expbsp2
LUCK model for inference from exponential data
with prior parameters: 
  n0 = 2 
  y0 = 7 
corresponding to a Gamma prior
 with alpha = 3 and beta = 14 
and ExponentialData object containing data of sample size 7 
 with mean 7 and variance 0 .
> expbsp3
generalized iLUCK model for inference from exponential data
with prior parameter set: 
  lower n0 = 10   upper n0 = 20 
  lower y0 = 1   upper y0 = 5 
 giving a main parameter prior imprecision of 4 
corresponding to a set of Gamma priors
 with alpha in [ 11 ; 21 ] and beta in [ 10 ; 100 ] 
and ExponentialData object containing a mean of 5 for sample size 200 .
> expbsp4
generalized iLUCK model for inference from exponential data
with prior parameter set: 
  lower n0 = 1   upper n0 = 2 
  y0 = 6 
corresponding to a set of Gamma priors
 with alpha in
			[ 2 ; 3 ] and beta in [ 6 ; 12 ] 
and ExponentialData object containing data of sample size 6 
 with mean 6 and variance 0 .
> expbsp5
generalized iLUCK model for inference from exponential data
with prior parameter set: 
  lower n0 = 1   upper n0 = 2 
  lower y0 = 3   upper y0 = 4 
 giving a main parameter prior imprecision of 1 
corresponding to a set of Gamma priors
 with alpha in [ 2 ; 3 ] and beta in [ 3 ; 8 ] 
and ExponentialData object containing data of sample size 10 
 with mean 4 and variance 0 .
> expbsp6
iLUCK model for inference from exponential data
with prior parameter set: 
  n0 = 1 
  lower y0 = 1   upper y0 = 5 
 giving a main parameter prior imprecision of 4 
corresponding to set of Gamma priors
 with alpha = 2 and beta in [ 1 ; 5 ] 
and ExponentialData object containing data of sample size 5 
 with mean 5 and variance 0 .
> 
> # singleHdi
> singleHdi(expbsp3, n=11, y=2, gamma=0.95)
[1] 0.2582130 0.8594904
> expect_error(singleHdi(bsp1, n=1, y=0, gamma=0.95)) # error: bsp1 is a generic LuckModel
> singleHdi(expbsp1, n=11, y=4, gamma=0.95)
[1] 0.1291065 0.4297452
> singleHdi(expbsp1, n=35, y=3.29, gamma=0.95)
[1] 0.2138646 0.4163569
> 
> # unionHdi
> unionHdi(expbsp3)
$borders
[1] 0.09957862 1.76133502

$lowpars
$lowpars$n
   
10 

$lowpars$y
lower 
    5 


$upppars
$upppars$n
   
10 

$upppars$y
upper 
    1 


> unionHdi(expbsp3, posterior=TRUE)$borders -> exphpd
> cdfplot(expbsp3, control=controlList(posterior=TRUE))
> lines(exphpd, rep(0,2), lwd=3)
> 
> # singleCdf
> singleCdf(expbsp2, n = 1, y = 1, x = 1)
[1] 0.2642411
> expect_error(singleCdf(bsp3)) # error: bsp1 is a generic LuckModel
> 
> # cdfplot
> cdfplot(expbsp1)
> cdfplot(expbsp1, xvec = 20) # plot over a number of 20 points
> cdfplot(expbsp1, xvec = seq(0, 4, length.out = 80)) 
> cdfplot(expbsp3)
> cdfplot(expbsp3, control = controlList(posterior=TRUE))
> 
> 
> #
> 
> proc.time()
   user  system elapsed 
  7.976   0.100   8.115 
